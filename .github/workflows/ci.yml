name: CI
on:
  - push
  - pull_request

concurrency:
  # If changes are pushed to a PR, stop all running workflows before starting new ones
  group: ${{ github.head_ref || (github.repository == 'saltstack/salt-jenkins' && github.run_id || github.ref_name) }}
  cancel-in-progress: true

jobs:

  generate-actions-workflow:
    name: Generate The Actions Workflow
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Set Python Cache Key
        run: echo "PY=$(python --version --version | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Setup Pre-Commit Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit/
          key: python|${{ runner.os }}|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install Pre-Commit
        run: |
          python3 -m pip install pre-commit
          pre-commit install --install-hooks

      - name: Run Pre-Commit
        run: |
          pre-commit run --color=always --show-diff-on-failure -av

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}

      - name: Upload Exit Status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: exitstatus
          path: exitstatus

  install-packer-plugins:
    name: Install And Cache Packer Plugins
    runs-on: macos-12
    needs:
      - generate-actions-workflow

    steps:
      - name: Install System Dependencies
        run: |
          if [ "x$(which tree)" == "x" ]
          then
            brew install tree
          fi

      - name: Setup Packer
        uses: hashicorp-contrib/setup-packer@v1
        with:
          packer-version: 1.8.2

      - name: Cache Packer Plugins
        uses: actions/cache@v3
        with:
          path: ~/.config/packer/plugins
          key: packer-plugins|${{ runner.os }}|1.8.2|v1.0.3

      - name: Install Packer Plugins
        env:
          PACKER_GITHUB_API_TOKEN: "${{ secrets.PACKER_INIT_GH_TOKEN }}"
        run: |
          if [ "x$(ls ~/.config/packer/plugins/github.com/hashicorp/vagrant/ | grep v1.0.3)" = "x" ]
          then
            packer plugins install github.com/hashicorp/vagrant v1.0.3
          fi

      - name: List Packer Plugins
        run: |
          tree ~/.config/packer/plugins

      - name: Upload Packer Plugins
        uses: actions/upload-artifact@v3
        with:
          name: packer-plugins
          path: |
            ~/.config/packer/plugins

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}

      - name: Upload Exit Status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: exitstatus
          path: exitstatus


  arch:
    name: Arch Linux
    uses: ./.github/workflows/golden-vagrant-image.yml
    needs:
      - install-packer-plugins
    with:
      os-name: arch
      os-arch-matrix: '["amd64"]'
      os-version-matrix: '["lts"]'
      exclude-matrix: '[]'
      packer-version: 1.8.2
    secrets:
      VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}


  centos-stream:
    name: CentOS Stream
    uses: ./.github/workflows/golden-vagrant-image.yml
    needs:
      - install-packer-plugins
    with:
      os-name: centos-stream
      os-arch-matrix: '["amd64"]'
      os-version-matrix: '["8", "9"]'
      exclude-matrix: '[]'
      packer-version: 1.8.2
    secrets:
      VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}


  debian:
    name: Debian
    uses: ./.github/workflows/golden-vagrant-image.yml
    needs:
      - install-packer-plugins
    with:
      os-name: debian
      os-arch-matrix: '["amd64", "arm64"]'
      os-version-matrix: '["10", "11"]'
      exclude-matrix: '[{"os-arch": "arm64", "os-version": "10"}, {"os-arch": "arm64", "os-version": "11"}]'
      packer-version: 1.8.2
    secrets:
      VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}


  fedora:
    name: Fedora
    uses: ./.github/workflows/golden-vagrant-image.yml
    needs:
      - install-packer-plugins
    with:
      os-name: fedora
      os-arch-matrix: '["amd64"]'
      os-version-matrix: '["35", "36"]'
      exclude-matrix: '[]'
      packer-version: 1.8.2
    secrets:
      VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}


  freebsd:
    name: FreeBSD
    uses: ./.github/workflows/golden-vagrant-image.yml
    needs:
      - install-packer-plugins
    with:
      os-name: freebsd
      os-arch-matrix: '["amd64"]'
      os-version-matrix: '["13.1"]'
      exclude-matrix: '[]'
      packer-version: 1.8.2
    secrets:
      VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}


  ubuntu:
    name: Ubuntu
    uses: ./.github/workflows/golden-vagrant-image.yml
    needs:
      - install-packer-plugins
    with:
      os-name: ubuntu
      os-arch-matrix: '["amd64", "arm64"]'
      os-version-matrix: '["18.04", "20.04", "22.04"]'
      exclude-matrix: '[{"os-arch": "arm64", "os-version": "18.04"}, {"os-arch": "arm64", "os-version": "20.04"}, {"os-arch": "arm64", "os-version": "22.04"}]'
      packer-version: 1.8.2
    secrets:
      VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}


  set-pipeline-exit-status:
    # This step is just so we can make github require this step, to pass checks
    # on a pull request instead of requiring all
    name: Set the ${{ github.workflow }} Pipeline Exit Status
    runs-on: ubuntu-latest
    needs:
      - install-packer-plugins
      - arch
      - centos-stream
      - debian
      - fedora
      - freebsd
      - ubuntu
    if: always()
    steps:

      - name: Download Exit Status Files
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: exitstatus
          path: exitstatus

      - name: Delete Exit Status Artifacts
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: exitstatus
          failOnError: false

      - name: Set Pipeline Exit Status
        run: |
          grep -RE 'failure|cancelled' exitstatus/ && exit 1 || exit 0

      - name: Done
        if: always()
        run:
          echo "All worflows finished"
